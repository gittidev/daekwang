{"version":3,"file":"index-B2kWDzzT.js","sources":["../../../../composables/useAdminAuth.ts","../../../../pages/admin/index.vue"],"sourcesContent":["// composables/useAdminAuth.ts\r\nimport { useRuntimeConfig, useCookie } from \"nuxt/app\";\r\nimport { ref, computed } from \"vue\";\r\nimport type { BaseResponse, TokenResponse } from \"@/types/common\";\r\n\r\nconst ADMIN_TOKEN_KEY = \"admin_token\";\r\n\r\nexport const useAdminAuth = () => {\r\n  const token = useCookie<string | null>(ADMIN_TOKEN_KEY);\r\n  const isLoggedIn = computed(() => !!token.value);\r\n  const loading = ref(false);\r\n  const error = ref<string | null>(null);\r\n  const config = useRuntimeConfig();\r\n\r\n  // 로그인\r\n  const login = async (\r\n    username: string,\r\n    password: string\r\n  ): Promise<BaseResponse<TokenResponse>> => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const res = await fetch(`${config.public.apiUrl}/admin/login`, {\r\n        method: \"POST\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        throw new Error(\"로그인에 실패했습니다.\");\r\n      }\r\n\r\n      const result: BaseResponse<TokenResponse> = await res.json();\r\n      const newToken = result.data?.access_token || null;\r\n      token.value = newToken;\r\n\r\n      return result;\r\n    } catch (err: any) {\r\n      error.value = err.message || \"알 수 없는 오류\";\r\n      throw err;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  // 로그아웃\r\n  const logout = () => {\r\n    token.value = null;\r\n  };\r\n\r\n  return {\r\n    token,\r\n    isLoggedIn,\r\n    login,\r\n    logout,\r\n    loading,\r\n    error,\r\n  };\r\n};\r\n","<template>\r\n  <div class=\"login-page\">\r\n    <div class=\"login-container\">\r\n      <h2>관리자 로그인</h2>\r\n      <form @submit.prevent=\"handdleLogin\" class=\"login-form\">\r\n        <input v-model=\"username\" placeholder=\"아이디\" class=\"input-field\" />\r\n        <input\r\n          v-model=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          class=\"input-field\"\r\n        />\r\n        <button type=\"submit\" class=\"login-button\">로그인</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useRouter } from \"vue-router\";\r\nimport { ref, onMounted } from \"vue\";\r\nimport { useAdminToken } from \"@/composables/useAdminToken\";\r\nimport { useAdminAuth } from \"@/composables/useAdminAuth\";\r\n\r\nconst username = ref<string>(\"\");\r\nconst password = ref<string>(\"\");\r\n\r\nconst router = useRouter();\r\nconst { login } = useAdminAuth();\r\nconst { isLoggedIn, token } = useAdminToken();\r\n\r\nonMounted(() => {\r\n  if (process.client) {\r\n    console.log(\"isLoggedIn\");\r\n    if (isLoggedIn.value) {\r\n      router.push(\"/admin/dashboard\");\r\n    }\r\n  }\r\n});\r\n\r\nconst handdleLogin = async () => {\r\n  try {\r\n    const result = await login(username.value, password.value);\r\n    router.push(\"/admin/dashboard\");\r\n  } catch (error) {\r\n    alert(\"로그인에 실패했습니다. 아이디 또는 비밀번호를 확인하세요.\");\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-page {\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.login-container {\r\n  background: white;\r\n  padding: 2rem 3rem;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\nh2 {\r\n  color: #2c3e50;\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.login-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n.input-field {\r\n  padding: 0.75rem 1rem;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  font-size: 1rem;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.input-field:focus {\r\n  outline: none;\r\n  border-color: #3498db;\r\n  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\r\n}\r\n\r\n.login-button {\r\n  padding: 0.75rem 1rem;\r\n  background: #3498db;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.login-button:hover {\r\n  background: #2980b9;\r\n}\r\n\r\n.login-button:active {\r\n  background: #2471a3;\r\n}\r\n</style>\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAKA,MAAM,kBAAkB;AAEjB,MAAM,eAAe,MAAM;AAC1B,QAAA,QAAQ,UAAyB,eAAe;AACtD,QAAM,aAAa,SAAS,MAAM,CAAC,CAAC,MAAM,KAAK;AACzC,QAAA,UAAU,IAAI,KAAK;AACnB,QAAA,QAAQ,IAAmB,IAAI;AACrC,QAAM,SAAS,iBAAiB;AAG1B,QAAA,QAAQ,OACZ,UACA,aACyC;;AACrC,QAAA;AACF,cAAQ,QAAQ;AAChB,YAAM,QAAQ;AAEd,YAAM,MAAM,MAAM,MAAM,GAAG,OAAO,OAAO,MAAM,gBAAgB;AAAA,QAC7D,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,SAAS;AAAA,UACP,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,UAAU,SAAU,CAAA;AAAA,MAAA,CAC5C;AAEG,UAAA,CAAC,IAAI,IAAI;AACL,cAAA,IAAI,MAAM,cAAc;AAAA,MAAA;AAG1B,YAAA,SAAsC,MAAM,IAAI,KAAK;AACrD,YAAA,aAAW,YAAO,SAAP,mBAAa,iBAAgB;AAC9C,YAAM,QAAQ;AAEP,aAAA;AAAA,aACA,KAAU;AACX,YAAA,QAAQ,IAAI,WAAW;AACvB,YAAA;AAAA,IAAA,UACN;AACA,cAAQ,QAAQ;AAAA,IAAA;AAAA,EAEpB;AAGA,QAAM,SAAS,MAAM;AACnB,UAAM,QAAQ;AAAA,EAChB;AAEO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;;;ACtCM,UAAA,WAAW,IAAY,EAAE;AACzB,UAAA,WAAW,IAAY,EAAE;AAEhB,cAAU;AACP,iBAAa;AACD,kBAAc;;;;;;;;;;;;;"}