{"file":"dashboard-ByyoKSNF.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAWuB,kBAAc;AACtB,cAAU;AACT,QAAI,KAAK;AACN,QAAI,EAAE;AACN,QAAI,EAAE;AACzB,UAAM,SAAS,iBAAiB;AA6B1B,UAAA,EAAE,MAAM,eAAe,QAAQ,KAAI,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAM;AAAA,MAE7C;AAAA,MAA+B,MAC/B,OAAO,GAAG,OAAO,OAAO,MAAM,wBAAwB;AAAA,QACpD,SAAS;AAAA,UACP,eAAe,UAAU,aAAa,QAAQ,aAAa,CAAC;AAAA,QAAA;AAAA,MAE/D,CAAA;AAAA,IACH,CAAA;AAEmB,aAAS,MAAM;;AAAA,kCAAc,UAAd,mBAAqB,WAAU;AAAA,KAAC;AAC3C;AAAA,MACrB;;AAAM,oCAAc,UAAd,mBAAqB,OAAO,CAAC,MAAM,EAAE,cAAc,WAAU;AAAA;AAAA,IAAA;AAE1C,aAAS,MAAM;;AAAA,iCAAc,UAAd,mBAAsB;AAAA,KAAE;AAG9C,QAAI;AAAA,MACtB,EAAE,OAAO,MAAM,OAAO,EAAE;AAAA,MACxB,EAAE,OAAO,MAAM,OAAO,EAAE;AAAA,MACxB,EAAE,OAAO,MAAM,OAAO,GAAG;AAAA,MACzB,EAAE,OAAO,MAAM,OAAO,GAAG;AAAA,MACzB,EAAE,OAAO,MAAM,OAAO,EAAE;AAAA,MACxB,EAAE,OAAO,MAAM,OAAO,EAAE;AAAA,MACxB,EAAE,OAAO,MAAM,OAAO,GAAG;AAAA,MACzB,EAAE,OAAO,MAAM,OAAO,EAAE;AAAA,MACxB,EAAE,OAAO,MAAM,OAAO,GAAG;AAAA,MACzB,EAAE,OAAO,OAAO,OAAO,GAAG;AAAA,MAC1B,EAAE,OAAO,OAAO,OAAO,GAAG;AAAA,MAC1B,EAAE,OAAO,OAAO,OAAO,GAAG;AAAA,IAC3B,CAAA;;;;;;;;;;;;;;","names":["_withAsyncContext"],"sources":["../../../../pages/admin/dashboard.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { useAdminToken } from \"../../composables/useAdminToken\";\r\nimport { useRouter } from \"vue-router\";\r\nimport { useAsyncData } from \"nuxt/app\";\r\nimport type { ConstructionResponse } from \"@/types/construction\";\r\nimport { computed, ref, onMounted } from \"vue\";\r\nimport MonthlyConstructionChart from \"@/components/MonthlyConstructionChart.vue\";\r\nimport { createAdmin } from \"@/lib/api/createAdmin\";\r\nimport type { AdminCreateRequest } from \"@/lib/api/createAdmin\";\r\nimport { useRuntimeConfig } from \"nuxt/app\";\r\n\r\nconst { isLoggedIn } = useAdminToken();\r\nconst router = useRouter();\r\nconst isReady = ref(false);\r\nconst newAdminId = ref(\"\");\r\nconst newAdminPw = ref(\"\");\r\nconst config = useRuntimeConfig();\r\n\r\n// 클라이언트에서만 인증 체크 및 이동 처리\r\nonMounted(() => {\r\n  if (process.client) {\r\n    if (!isLoggedIn.value) {\r\n      router.push(\"/admin\");\r\n    } else {\r\n      isReady.value = true;\r\n    }\r\n  }\r\n});\r\n\r\nconst handleAddAdmin = async () => {\r\n  const payload: AdminCreateRequest = {\r\n    username: newAdminId.value,\r\n    password: newAdminPw.value,\r\n  };\r\n  const { data, error } = await createAdmin(payload);\r\n  if (error) {\r\n    alert(`⚠️ ${error}`);\r\n  } else {\r\n    alert(`✅ 관리자 계정(${data?.username})이 생성되었습니다.`);\r\n    newAdminId.value = \"\";\r\n    newAdminPw.value = \"\";\r\n  }\r\n};\r\n\r\n// 시공 데이터\r\nconst { data: constructions, pending } = await useAsyncData<\r\n  ConstructionResponse[]\r\n>(\"admin-constructions-summary\", () =>\r\n  $fetch(`${config.public.apiUrl}/admin/constructions`, {\r\n    headers: {\r\n      Authorization: `Bearer ${localStorage.getItem(\"admin_token\")}`,\r\n    },\r\n  })\r\n);\r\n\r\nconst totalCount = computed(() => constructions.value?.length || 0);\r\nconst publishedCount = computed(\r\n  () => constructions.value?.filter((c) => c.is_published).length || 0\r\n);\r\nconst latestConstruction = computed(() => constructions.value?.[0]);\r\n\r\n// 더미 월별 시공 데이터\r\nconst monthlyData = ref([\r\n  { month: \"1월\", count: 5 },\r\n  { month: \"2월\", count: 8 },\r\n  { month: \"3월\", count: 12 },\r\n  { month: \"4월\", count: 15 },\r\n  { month: \"5월\", count: 7 },\r\n  { month: \"6월\", count: 9 },\r\n  { month: \"7월\", count: 10 },\r\n  { month: \"8월\", count: 6 },\r\n  { month: \"9월\", count: 11 },\r\n  { month: \"10월\", count: 14 },\r\n  { month: \"11월\", count: 13 },\r\n  { month: \"12월\", count: 16 },\r\n]);\r\n</script>\r\n\r\n<template>\r\n  <client-only>\r\n    <div v-if=\"isReady\" class=\"dashboard\">\r\n      <h1 class=\"text-2xl font-bold mb-6\">관리자 대시보드</h1>\r\n      <!-- 관리자 추가 섹션 -->\r\n      <div class=\"mt-6\">\r\n        <h2 class=\"text-lg font-semibold mb-2\">➕ 관리자 추가</h2>\r\n        <input\r\n          v-model=\"newAdminId\"\r\n          placeholder=\"이메일 (아이디)\"\r\n          class=\"border px-3 py-2 rounded w-full mb-2\"\r\n        />\r\n        <input\r\n          v-model=\"newAdminPw\"\r\n          type=\"password\"\r\n          placeholder=\"비밀번호\"\r\n          class=\"border px-3 py-2 rounded w-full mb-2\"\r\n        />\r\n        <button @click=\"handleAddAdmin\" class=\"contact-button w-full\">\r\n          관리자 추가\r\n        </button>\r\n      </div>\r\n\r\n      <!-- 요약 카드 그리드 -->\r\n      <div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\r\n        <div class=\"summary-card\">\r\n          <p class=\"text-sm text-gray-500\">총 시공 건수</p>\r\n          <p class=\"text-2xl font-bold\">{{ totalCount }}</p>\r\n        </div>\r\n\r\n        <div class=\"summary-card\">\r\n          <p class=\"text-sm text-gray-500\">공개된 시공</p>\r\n          <p class=\"text-2xl font-bold\">{{ publishedCount }}</p>\r\n        </div>\r\n\r\n        <div class=\"summary-card\">\r\n          <p class=\"text-sm text-gray-500\">최근 등록</p>\r\n          <p class=\"text-md font-semibold truncate\">\r\n            {{ latestConstruction?.place || \"없음\" }}\r\n          </p>\r\n          <p class=\"text-sm text-gray-400\">\r\n            {{ latestConstruction?.created_at?.slice(0, 10) || \"\" }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 차트와 버튼을 위한 그리드 레이아웃 -->\r\n      <div class=\"chart-and-buttons grid grid-cols-1 lg:grid-cols-5 gap-6 mb-8\">\r\n        <!-- 월별 시공 건수 차트 (왼쪽, 3/5) -->\r\n        <div class=\"chart-container lg:col-span-3\">\r\n          <MonthlyConstructionChart :data=\"monthlyData\" />\r\n        </div>\r\n\r\n        <!-- 관리 링크 버튼 (오른쪽, 2/5) -->\r\n        <div class=\"buttons-container lg:col-span-2\">\r\n          <NuxtLink to=\"/admin/constructions\" class=\"card-link\">\r\n            <h2 class=\"text-xl font-semibold\">🛠️ 시공 내역 관리</h2>\r\n            <p class=\"text-sm text-gray-500\">시공 기록을 조회 및 수정합니다.</p>\r\n          </NuxtLink>\r\n\r\n          <NuxtLink to=\"/admin/settings\" class=\"card-link mt-4\">\r\n            <h2 class=\"text-xl font-semibold\">⚙️ 설정</h2>\r\n            <p class=\"text-sm text-gray-500\">\r\n              사이트 및 관리자 정보를 수정합니다.\r\n            </p>\r\n          </NuxtLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </client-only>\r\n</template>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  max-width: 80%;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n  min-height: 100vh;\r\n}\r\n\r\n.summary-card {\r\n  background: #f8fafc;\r\n  padding: 1rem 1.5rem;\r\n  border-radius: 8px;\r\n  border: 1px solid #e2e8f0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n\r\n.chart-and-buttons {\r\n  align-items: center; /* 차트와 버튼을 수직 중앙 정렬 */\r\n}\r\n\r\n.chart-container {\r\n  max-width: 100%;\r\n}\r\n\r\n/* 차트 크기 조정 */\r\n.chart-container :deep(canvas) {\r\n  max-height: 350px; /* 차트 높이 약간 키움 */\r\n  width: 100%;\r\n  aspect-ratio: 4 / 3; /* 차트의 가로:세로 비율 조정 */\r\n}\r\n\r\n.buttons-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem; /* 버튼 간 간격 늘림 */\r\n  justify-content: center; /* 버튼을 수직 중앙에 배치 */\r\n}\r\n\r\n.card-link {\r\n  display: block;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  padding: 1.5rem;\r\n  background: white;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.card-link:hover {\r\n  background-color: #f1f5f9;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n/* 반응형 조정 */\r\n@media (max-width: 1024px) {\r\n  .chart-and-buttons {\r\n    gap: 2rem; /* 모바일에서 더 넓은 간격 */\r\n  }\r\n  .chart-container {\r\n    max-width: 100%;\r\n  }\r\n  .buttons-container {\r\n    margin-top: 1rem;\r\n  }\r\n  .chart-container :deep(canvas) {\r\n    max-height: 300px; /* 모바일에서 약간 작게 */\r\n    aspect-ratio: 3 / 2; /* 모바일 비율 조정 */\r\n  }\r\n}\r\n</style>\r\n"],"version":3}